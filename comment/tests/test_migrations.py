from unittest.mock import patch

from django.test import TestCase
from django.core.management import call_command
from django.contrib.auth.models import ContentType, Group, Permission

from comment.conf import settings
from comment.tests.base import BaseCommentMigrationTest


class CommentMigrationTest(BaseCommentMigrationTest):
    migrate_from = '0007_auto_20200620_1259'
    migrate_to = '0009_auto_20200811_1945'

    def create_comment(self):
        self.instance += 1

        return self.old_model.objects.create(
            content_type_id=self.ct_object.id,
            object_id=self.instance,
            content=f'test migration - {self.instance}',
            user_id=self.user.id,
        )

    def setUpBeforeMigration(self):
        self.instance = 0
        self.comment = self.create_comment()

    def test_email_and_urlhash_migrated(self):
        comment = self.new_model.objects.get(id=self.comment.id)

        self.assertIs(hasattr(comment, 'urlhash'), True)
        self.assertEqual(comment.email, comment.user.email)


class GroupsAndPermissionsTest(TestCase):
    groups = [
        'comment_admin',
        'comment_moderator',
    ]
    permissions = [
        'delete_comment',
        'delete_flagged_comment',
    ]

    def setUp(self):
        super().setUp()
        Group.objects.filter(name__in=self.groups).delete()
        Permission.objects.filter(codename__in=self.permissions).delete()

    @staticmethod
    def _migrate():
        call_command('migrate', verbosity=0)

    def _get_groups_not_created(self):
        return (
            set(self.groups) -\
                set(
                    Group.objects
                    .filter(name__in=self.groups)
                    .values_list('name', flat=True)
                )
            )

    def _get_permissions_not_created(self):
        return (
            set(self.permissions) -\
                set(
                    Permission.objects
                    .filter(codename__in=self.permissions)
                    .values_list("codename", flat=True)
                )
            )

    def permissions_and_groups_created_test(self):
        self._migrate()

        self.assertEqual(
            Group.objects.filter(name__in=self.groups).count(),
            len(self.groups),
            msg=f'Group(s) {self._get_groups_not_created()} has/have not been created',
        )
        self.assertEqual(
            Permission.objects.filter(codename__in=self.permissions).count(),
            len(self.permissions),
            msg=f'Permission(s) {self._get_permissions_not_created()} has/have not been created',
        )

    @patch.object(settings, 'COMMENT_ALLOW_BLOCKING_USERS', True)
    @patch.object(settings, 'COMMENT_FLAGS_ALLOWED', 0)
    def test_when_blocking_is_allowed_and_flagging_is_not(self):
       self.permissions_and_groups_created_test()

    @patch.object(settings, 'COMMENT_ALLOW_BLOCKING_USERS', False)
    @patch.object(settings, 'COMMENT_FLAGS_ALLOWED', 1)
    def test_when_flagging_is_allowed_and_blocking_is_not(self):
       self.permissions_and_groups_created_test()

    @patch.object(settings, 'COMMENT_ALLOW_BLOCKING_USERS', False)
    @patch.object(settings, 'COMMENT_FLAGS_ALLOWED', 0)
    def test_when_both_flagging_and_blocking_is_disabled(self):
        self._migrate()

        self.assertIs(
            Group.objects.filter(name__in=self.groups).exists(),
            False,
            msg=(
                'Group(s) '
                f'{Group.objects.filter(name__in=self.groups).values("name")} '
                'has/have not been deleted',
            ),
        )

        # delete permission is re-created because it is one of the default ones generated by django
        delete_permission = 'delete_comment'
        permissions = set(self.permissions) - {delete_permission}
        self.assertIs(
            Permission.objects.filter(codename__in=permissions).exists(),
            False,
            msg=(
                'Permission(s) '
                f'{Permission.objects.filter(codename__in=permissions).values("codename")} '
                'has/have not been deleted',
            ),
        )
